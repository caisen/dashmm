-----------------------------------
Installation Instruction for DASHMM
-----------------------------------

This document outlines briefly the instructions for building DASHMM and using
it in applications.


Prerequisites:

ASHMM v. 2.0.0 depends on one external library: HPX-5. The current
version of DASHMM depends on version 4.1.0 of HPX-5 or later, which
may be found at https://hpx.crest.iu.edu/. Please see the official
HPX-5 documentation for instructions on how to build, install
and run HPX-5 on your system.

The DASHMM build system relies on the pkg-config utility to
specify the needed HPX-5 compilation and linking options, so it is
important to add the correct path for HPX-5 to your PKG_CONFIG_PATH
environment variable. For example, assuming HPX-5 is installed in
/path/to/hpx, this can be accomplished using bash with:

export PKG_CONFIG_PATH=/path/to/hpx/lib/pkgconfig:$PKG_CONFIG_PATH


---- Building DASHMM ----

The DASHMM library is straightforward to build. DASHMM uses CMake for its
build system, and so CMake of version at least 3.4 is required to build
DASHMM. To build DASHMM, perform the following steps.

1) Unpack the source code into some convenient directory. For the
  sake of discussion, this guide assumes that the code has been
  unpacked in /path/to/dashmm/.

2) Create some directory in which to build DASHMM. For the sake of argument,
  assume that this is /path/to/dashmm/build/.

3) From that directory, run
      cmake .. -DCMAKE_INSTALL_PREFIX=/path/to/dashmm/install/.
  It is not recommended to use the default value for CMAKE_INSTALL_PREFIX.
  There are various additional options that CMake will use during this
  process, see the CMake documentation for a description of these. For
  instance, to change the compiler used, specify -DCMAKE_C_COMPILER and
  -DCMAKE_CXX_COMPILER when running cmake.

4) Run make from /path/to/dashmm/build.

5) Run make install from /path/to/dashmm/build/. This will install the
  library and the header files in the specified place.

6) Further build targets are available, including basic, stepping and user,
  which build the various demo programs included with DASHMM. These will not
  be installed by make install, and will instead be built in
  /path/to/dashmm/build/demo/.


Because DASHMM is heavily templated, a good deal of the code is
contained in the header files. This means that much of the compilation
of the DASHMM code will occur when the user code is compiled. This can
increase the compilation time of user code, but the added flexibility
of DASHMM is worth the minor increase in compilation time.


---- Linking against DASHMM ----

To build a program using the DASHMM library, only a few things need to
be done. One must specify where to look for the header files, and
where to look for the built library. Further, because DASHMM relies on
HPX-5, one must also specify how to find HPX-5. For HPX-5 this is the
easiest with the pkg-config utility.

Assuming that DASHMM was installed in /path/to/dashmm/install/, to
compile code (with, for example g++) one must specify the following
arguments for compilation:

  -I/path/to/dashmm/install/include $(shell pkg-config --cflags hpx)

Similarly, one must specify the following arguments for linking:

  -L/path/to/dashmm/install/lib -ldashmm $(shell pkg-config --libs hpx)

For an example of automatically pulling and building DASHMM inside another
project (with CMake), see the AFMPB project:
https://github.com/zhang416/afmpb.


---- DASHMM demo programs ----

Included with DASHMM are several test codes that demonstrate the use
of the library. These are found in the /path/to/dashmm/demo
subfolder. Detailed information about each example can be found in
the provided README file. Each can be built by running
make <target>, where <target> is the demo program name.

Basic Demo

The 'basic' demo code creates a random distribution of source and
target points and computes the potential at the targets due to the
sources using any of the built-in kernels provided with DASHMM. A user
can request a summary of the options to the test code by running the
code with '--help' as a command line argument, or by reading
/path/to/dashmm/demo/basic/README.

Time-stepping demo

The 'stepping' demo code creates a distribution of particles and
computes their acceleration and integrates their motion forward in
time. Note that the point of the demo is not to provide a great time
integrator, so many fine points of creating a good integrator are
skipped. Instead, 'stepping' demonstrates those features of DASHMM
that enable time-stepping codes as a use-case for DASHMM. A user can
request a summary of the options to the code by running the code with
'--help' as a command line argument, or by reading
/path/to/dashmm/demo/stepping/README.

User-Defined Expansion Demo

The 'user' demo provides a skeleton code that implements a new
expansion type. The code is documented, and the requirements of the
Expansion concept are outlined in the in-source comments. This example
should be considered to be more advanced, and would require
investigation of the advanced interface to understand completely.