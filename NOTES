* First release TODO
  - Be sure to complete the in-source documentation
  - Make sure that all the includes are needed, and follow the style guide
    in their ordering
  - look at all of the TODOs in the code - see if any can be treated
  - create a build system for making DASHMM into a library
  - enlist Matt as an end-user for testing the ease of the build system
  - create the basic testing code for running some numbers
  - Make sure that the user is aware that the potential comes out as a
    complex number
  - We should make the array get and put members of the basic interface not
    give assertion failures on bad inputs. Instead, it should return one of
    the return codes.
  - Update the Basic user guide
  - Start to work on the Advanced User Guide (we have a few of the advanced
    features implemented.) Also, having a guide for implementing new internal
    methods and expansions it would be helpful, as it would be easy to miss
    something.


Some notes about issues or future features

* In the future, we may want to have the ObjectHandle be something a little
more specific. Perhaps a dashmm::Array object. Of course, like everything else
it is backed by data in the GAS, but it would at least add some meaning to the
symbols in the code.

* We will need to improve the error handling in this thing quite a bit.
Basically any way that the user-facing methods can go wrong should return
sensible error where possible instead of just being assertions that fail.

* We really ought to hide all the internal interface stuff that has to be
exposed in header files separate from the users.


Interface Ideas

 * We should add kDomainError where it makes sense

 * Do we want a direct sum method?

 * For the array get and put, should we perhaps have a template function that
   accepts iterators here? This would make it work nicely with the STL

 * Do we want to define instead SourceSpec and TargetSpec to combine the
   relevant arguments for evaluate()?

 * Is there a sensible way to templatize allocate_array?

 * Eventually the expansion should have a method indicating the number of
   charges. And the number of outputs (phi, ax, ay, az, whatever)

 * We should add a routine to check compatibility without having to call
   evaluate to check method,expansion compatibility.

 * Provide C bindings before too long

 * We should also in the near term get a base nearest neighbor search. This will
 be essential for SPH and Phil's MFV methods.
  This would be useful in much wider contexts, however.
