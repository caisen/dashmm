
Implementation Tasks
---------------------

TODO: Clean up dualtree.h
      remove whatever possible from that into the evaluator object.
      ---> Would that remove the Expansion and Method template arguments?
           That would be nice.
TODO: Change distropolicy_t to work like the serializer does now.
TODO: Decide if there is a better solution to the access to tree node problem
      that has cropped up for DAGInfo.
TODO: Decide if the current solution for the DAG vector capacity problem is
      good enough, or if we should instead work toward collecting the tree
      sizes.
TODO: This is likely the big limiter in the short term on problem size. We
      need to improve the memory use of the explicit DAG. If there were a way
      to perhaps clean that up before we really begin the execution that would
      be awesome, or to start to delete it when it begins. But there is a good
      deal of waste and repetition there. The fact of the explicit DAG is nice,
      but it needs to be made more efficient.
          There has been some work on this, and I am not sure if there is not
          more we can do. Take a look, and if we have basically done it, we
          should just go ahead and remove this item from this list.
TODO: be more clear about when an expansion needs to own data and when not.
TODO: Make the way that Expansions manage their data not as bad as it
      is now. Really. There is a strange complicated dance happening with
      all of this, and it will be easy for a user to muck it up.
TODO: ViewSet is not something I particularly like. See if there is a way to
  make this less awful. (This is basically the same as above)


Features
--------

TODO: Perhaps we want to parameterize the nodes with some user data? So
      the user can use the tree for other things as well.
TODO: Work out if there is a better way to apply the distribution. We shall
      need to have some way to parallelize it, or have some way to overlap that
      work with other work.
        Perhaps have a second pass with the same sort of tree parallel thing
        like when the DAG is discovered.
TODO: Add ability to update tree based on update to source and targets.
      Compute Delta Tree.
TODO: Compute Delta DAG from Delta Tree.


HPX-5 related
-------------
TODO: Think about if there are places that RDMA could improve the performance.
      That might have us putting more into the GAS.
TODO: The remote stuff should be an RDMA into a preallocated buffer. At least,
      this would allow a no-copy spawn of the remote edges.
TODO: Make up some utility classes to make the HPX-5 interface more expressive
      (even if a bit more long winded).


Related to REU Work
-----------------------
TODO: Test Drake's other ideas and code for the distribution. Merge the best
      into dev-v2.
      ---> probably make the unif node distribution all be classes that derive
           from some abstract base. And then let the user supply an instance
           that they want to use, and have some suitable default.
TODO: Start to isolate backend inside DASHMM. Integrate BARIUM


Software Engineering/Good Practice Related
------------------------------------------
TODO: Update naming scheme of non static class members (lots of these)
      change_from_this style toThisStyle.
TODO: We are pretty inconsistent about the use of int vs size_t. Work out what
      to do about this.
          Basically, leave it better than you found it.
        - One place this is annoying is in the 'other_member' member of dag
          nodes. At the moment, we use the larger size there, and case to
          integers for the accuracy.
TODO: create standard regression and performance testing script to determine
      quality of a build.
TODO: Finish interface
    - Make it so that an advanced user could call all the needed stuff directly
      from an HPX thread. <----- THIS ONE MAY BE MORE IMPORTANT THAN IT WAS
    - As a corollary to that, add assertions to routines that have
      inside / outside HPX restrictions
TODO: The expansion concept does not allow for access of the kernel parameters.
   They end up in the table, and cannot be accessed later. Not sure if this is
   a problem, but it could be.
TODO: Another idea from Bo: Store the edges in one place and then just index
      into that. Cuts down on the representation by quite a bit.
TODO: FORTRAN skeleten Expansion. Somehow link to a user's existing FORTRAN
      operations.

