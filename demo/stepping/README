---------------------
stepping demo program
---------------------

This demo contains a simple time stepping code to demonstrate the means by
which a user can map an action onto the elements of a DASHMM Array. The
code creates a number of particles in the volume inside a unit sphere and lets
them evolve forward in time under their mutual gravitational interaction.
This example is demonstrative only, and so do not expect high quality
time integrations.


-----------------
Building the Demo
------------------

To build the demo follow these steps:

1) Build the DASHMM library.

2) In this folder, run 'make'.


--------------
Using the demo
--------------

To run the demo, type './testdashmm'. This will run the utility with a set
of default arguments. The behavior of the demo can be controlled by a set of
command line arguments.

Options available: [possible/values] (default value)
  --nsources=num               number of source points to generate (10000)
  --threshold=num              source and target tree partition refinement
                                 limit (40)
  --nsteps=num                 number of steps to take (20)
  --output=file                specify file for output (disabled)

After running, the code will output some summary information. If an output file
is provided, the final positions, velocities and accelerations of the particles
will be written out in the provided file. Each line of the file will contain
10 entries separated by a space: three coordinates, three velocity components,
three acceleration components and the original index of the particle in
question.

There is one HPX-5 command line argument that may be of use. Specifying
--hpx-threads=num on the command line will control how many scheduler threads
HPX-5 is using. If this is not specified, then HPX-5 will use one thread per
available core on the system. In principle, the number of scheduler threads
is limited only by the available system resources. In practice, you will not
improve performance using more HPX-5 threads than there are cores on your
system.


---------------
Important Notes
---------------

The purpose of this demo code is to illustrate how one might use DASHMM for
time stepping. This code does _not_ have a good time integrator. This code is
not using softened forces, so close encounters can cause very bad behavior.
