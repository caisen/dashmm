TODO:

* Test branch hpx-1000 which uses a different scheduler

KNOWN LIMITATIONS:
* There is a chance that an extremely long segment will not show up on the
  resulting images. If a segment extends off either side of the timespan
  represented by a given pixel in the image, the current code will not color
  it at all. This is, of course, an error. To sort that out, we likely have
  to invert the way we collect the information into the image. Instead of
  gathering into the bin, we should scatter the segment into the various bins.

SOON
* With the reorganization of the sort, we now have nothing that happens with the
  find and reset zero thing. Perhaps we need to just be okay with the
  modification of the stamp after finalization?
* Make the plotter accept a list of segment types that are of interest
   Currently, we take in a single segment, and will produce images only of that
   segment type. That will be enough for now. But this is not really done.


LATER
* Work out if the ZEROREF thing actually does anything. If it does not, remove
  it
* Add the ability to handle the Trace IO events to the system. To avoid some
  annoyance, we will probably put those also in the traceutils::dashmm
  namespace.
* Send email to Daniel and cc Luke with a list of requests for the tracing
  system. This includes making it easy to add user events like I have done,
  and a way to remove events that also removes the file output and all of that.
  It would not have to be perfect, but having to go through what I go through
  is obnoxious mostly.



So the next step is to work out how to make this stuff useful.

 * Do I want to have a means to replace things with segments?
   Perhaps this is an operation after querying for a window of events.
   The user would ask for a window, and then segmentize the results. The
   segments would basically be pairs of iterators probably. This might need
   another member of Event to indicate the segment type. Presumably there
   would be no overlapping segments, but with differing event types, we might.

   Probably it would be required that the events of paired type would have
   to alternate start() end() and so on.



NOTE:

This needs to have access to PNGWriter

http://pngwriter.sourceforge.net/


